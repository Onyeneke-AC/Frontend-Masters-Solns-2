function getStudentId(studentId){
	return studentRecords.find(function matchId(records){
		return (records.id == studentId);
	});
}

function printRecords(recordIds) {
	let records = recordIds. map(getStudentId);
	records.sort(function ascOrder(record1, record2){
		if (record1.name < record2.name){
			return -1;
		}
		else if (record1.name > record2.name){
			return 1;
		}
		else{
			return 0;
		}
	});
	records.forEach(function printEach(record){
		console.log(`${record.name} (${record.id}): ${record.paid ? "paid" : "not paid"}`);
	}); 
		
}

function paidStudentsToEnroll() {
	let idEnroll = studentRecords.filter(function needEnroll(records){
		return (records.paid && !currentEnrollment.includes(records.id));
	}).map(function getStudent(record){
		return record.id;
	});  

	return [...currentEnrollment, ... idEnroll];
}

function remindUnpaid(recordIds) {
	let unpaid = recordIds.filter(function notPaid(studentId){
		let record = getStudentId(studentId);
		return !record.paid;
	});

	printRecords(unpaid);
}


// ********************************

var currentEnrollment = [ 410, 105, 664, 375 ];

var studentRecords = [
	{ id: 313, name: "Frank", paid: true, },
	{ id: 410, name: "Suzy", paid: true, },
	{ id: 709, name: "Brian", paid: false, },
	{ id: 105, name: "Henry", paid: false, },
	{ id: 502, name: "Mary", paid: true, },
	{ id: 664, name: "Bob", paid: false, },
	{ id: 250, name: "Peter", paid: true, },
	{ id: 375, name: "Sarah", paid: true, },
	{ id: 867, name: "Greg", paid: false, },
];

printRecords(currentEnrollment);
console.log("----");
currentEnrollment = paidStudentsToEnroll();
printRecords(currentEnrollment);
console.log("----");
remindUnpaid(currentEnrollment);
